"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("regenerator-runtime/runtime");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Catch, retry or continue code blocks.
 */
var CatchContinue = /*#__PURE__*/function () {
  /**
   * Setup the class.
   */
  function CatchContinue() {
    _classCallCheck(this, CatchContinue);

    this.segments = [];
    this.pointer = 0;
  }
  /**
   * Convert a chained method to a function method and append it to a segment.
   *
   * @private
   * @param {Function} segmentId
   * @returns {Proxy}
   */


  _createClass(CatchContinue, [{
    key: "wrapSegment",
    value: function wrapSegment(segmentId) {
      var _this = this;

      return new Proxy({}, {
        get: function get(_, prop) {
          return function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var wrappedFunc = _this.segments[segmentId];
            _this.segments[segmentId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var instance;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return wrappedFunc();

                    case 2:
                      instance = _context.sent;
                      _context.next = 5;
                      return instance[prop].apply(instance, args);

                    case 5:
                      return _context.abrupt("return", _context.sent);

                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));
            return _this.wrapSegment(segmentId);
          };
        }
      });
    }
    /**
     * Same as asyncWrap but wraps the instance in a function.
     *
     * @param {object} instance
     * @returns {Proxy}
     */

  }, {
    key: "wrap",
    value: function wrap(instance) {
      var _this2 = this;

      return new Proxy({}, {
        get: function get(_, prop) {
          return function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            var segmentId = _this2.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return instance[prop].apply(instance, args);

                    case 2:
                      return _context2.abrupt("return", _context2.sent);

                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })));

            return _this2.wrapSegment(segmentId);
          };
        }
      });
    }
    /**
     * Add a segment.
     *
     * @param {Function} func
     * @returns {number}
     */

  }, {
    key: "add",
    value: function add(func) {
      this.segments = [].concat(_toConsumableArray(this.segments), [func]);
      return this.segments.length - 1;
    }
    /**
     * Run the segments.
     *
     * @param {any[]} args - Arguments to pass to each segment.
     * @throws {any}
     */

  }, {
    key: "run",
    value: function () {
      var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _len3,
            args,
            _key3,
            _this$segments,
            _args3 = arguments;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = _args3[_key3];
                }

                this.args = args;

              case 2:
                if (!(this.pointer < this.segments.length)) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 5;
                return (_this$segments = this.segments)[this.pointer].apply(_this$segments, _toConsumableArray(this.args));

              case 5:
                this.pointer++;
                _context3.next = 2;
                break;

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function run() {
        return _run.apply(this, arguments);
      }

      return run;
    }()
    /**
     * Retry the failed segment.
     */

  }, {
    key: "retry",
    value: function () {
      var _retry = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.run.apply(this, _toConsumableArray(this.args));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function retry() {
        return _retry.apply(this, arguments);
      }

      return retry;
    }()
    /**
     * Continue, skipping the failed segment.
     */

  }, {
    key: "continue",
    value: function () {
      var _continue2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.pointer++;
                _context5.next = 3;
                return this.run.apply(this, _toConsumableArray(this.args));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _continue() {
        return _continue2.apply(this, arguments);
      }

      return _continue;
    }()
  }]);

  return CatchContinue;
}();

var _default = CatchContinue;
exports["default"] = _default;